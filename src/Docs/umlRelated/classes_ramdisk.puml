@startuml classes_ramdisk
set namespaceSeparator none
class "ramdisk.commonRamdiskTemplate.RamDiskTemplate" as ramdisk.commonRamdiskTemplate.RamDiskTemplate {
  diskSize : int
  logger : bool
  mntPoint : bool, bytes, str
  module_version : str
  myRamdiskDev : NoneType
  success : bool
  getData()
  getDevice()
  getMountPoint()
  getNlogData()
  getNprintData()
  getRandomizedMountpoint()
  getVersion()
  setDevice(device)
  umount()
  unmount()
}
class "ramdisk.lib.CheckApplicable.CheckApplicable" as ramdisk.lib.CheckApplicable.CheckApplicable {
  applicable : NoneType
  environ
  fismacat
  logger
  myosfamily
  myostype
  myosversion
  noroot : NoneType
  systemFismaLevel
  fismaApplicable(checkLevel, systemLevel)
  getOsFamily()
  getOsType()
  getOsVer()
  getSystemFismaLevel()
  isApplicable(applicableDict)
  isApplicableValid(applicable)
  isInRange(rangeList, myversion)
  setOsBasedOnEnv()
  setOsFamily(osfamily)
  setOsType(ostype)
  setOsVer(osver)
  setSystemFismaLevel(level)
}
class "ramdisk.lib.environment.Environment" as ramdisk.lib.environment.Environment {
  conf_path : str
  debugmode : bool
  euid
  homedir : str
  hostname : str
  icon_path : str
  installmode : bool
  ipaddress : str
  log_path : str
  macaddress : str
  major_ver : str
  minor_ver : str
  numrules : int
  operatingsystem : bytes, str
  osfamily : str
  osreportstring : str
  osversion : bytes, str
  resources_path : str
  rules_path : str
  runtime
  rw
  script_path : str
  systemfismacat : str
  systemtype : str
  test_mode : bool, str
  trivial_ver : str
  verbosemode : bool
  version : str
  collectinfo()
  collectpaths()
  determinefismacat()
  discoveros()
  get_chassis_manfacturer()
  get_chassis_serial_number()
  get_config_path()
  get_icon_path()
  get_log_path()
  get_resources_path()
  get_rules_path()
  get_script_path()
  get_sys_uuid()
  get_system_manufacturer()
  get_system_serial_number()
  get_test_mode()
  getallips()
  getdebugmode()
  getdefaultip()
  geteuid()
  geteuidhome()
  gethostname()
  getinstallmode()
  getipaddress()
  getmacaddr()
  getnumrules()
  getosfamily()
  getosmajorver()
  getosminorver()
  getosreportstring()
  getostrivialver()
  getostype()
  getosver()
  getruntime()
  getsystemfismacat()
  getsystemtype()
  getverbosemode()
  getversion()
  guessnetwork()
  ismobile()
  issnitchactive()
  matchip(target, iplist, level)
  setdebugmode(debugmode)
  setinstallmode(installmode)
  setnumrules(num)
  setosfamily()
  setsystemfismacat(category)
  setsystemtype()
  setverbosemode(verbosemode)
}
class "ramdisk.lib.fsHelper.macosFsHelper.FsHelper" as ramdisk.lib.fsHelper.macosFsHelper.FsHelper {
  chkApp
  environ
  logger
  module_version : str
  getDiskSizeInMb(size)
  getFsBlockSize(size)
}
class "ramdisk.lib.loggers.CyLogger" as ramdisk.lib.loggers.CyLogger {
  fileHandler : bool
  filename : str
  instanciatedLoggers : dict
  logr : NoneType, RootLogger
  logrs : dict
  lvl : int
  rotate : bool
  syslog : bool
  doRollover(rothandler)
  initializeLogs(logdir, filename, extension_type, logCount, size, syslog, myconsole)
  log(priority, msg)
  setInitialLoggingLevel(level)
  {abstract}setUpHandler()
  {abstract}setUpLogger()
  validateLevel(level)
}
class "ramdisk.lib.loggers.MockLogger" as ramdisk.lib.loggers.MockLogger {
  {abstract}doRollover()
  {abstract}initializeLogs()
  {abstract}log()
  {abstract}setInitialLoggingLevel()
  {abstract}setUpHandler()
  {abstract}setUpLogger()
  {abstract}validateLevel()
}
class "ramdisk.lib.run_commands.RunWith" as ramdisk.lib.run_commands.RunWith {
  cfds : NoneType, bool
  command : NoneType
  creationflags : str
  environ : NoneType
  logger : NoneType
  module_version : str
  myshell : NoneType, bool
  output
  printcmd : NoneType, str
  prompt : str
  retcode : NoneType, int
  stderr : NoneType, bytes, str
  stdout : NoneType, bytes, str
  text : bool
  communicate(silent)
  getNlogReturns(nolog)
  getNprintReturns()
  getReturnCode()
  getReturns()
  getStderr()
  getStdout()
  killProc(proc, timeout)
  liftDown(user, target_dir, silent)
  runAs(user, password, silent)
  runWithSudo(password, silent, timeout_sec)
  setCommand(command, env, myshell, close_fds, text, creationflags)
  timeout(timout_sec, silent)
  wait(silent)
  waitNpassThruStdout(chk_string, respawn, silent)
}
class "ramdisk.lib.singleton.Singleton" as ramdisk.lib.singleton.Singleton {
}
class "ramdisk.lib.singleton.SingletonMeta" as ramdisk.lib.singleton.Singleton.SingletonMeta {
}
class "ramdisk.linuxTmpfsRamdisk.RamDisk" as ramdisk.linuxTmpfsRamdisk.RamDisk {
  creds : bool
  diskSize : int
  fstype : str
  gid : NoneType
  logger
  mntPoint : str
  mode : int
  module_version : str
  mountPath
  myRamdiskDev : str
  nr_blocks : NoneType
  nr_inodes : NoneType
  passwd : str
  runWith
  success : bool
  uid : NoneType
  umountPath
  buildCommand()
  detach()
  getCmds()
  getVersion()
  remount(size, mountpoint, mode, uid, gid, nr_inodes, nr_blocks)
  umount()
  unmount()
}
class "ramdisk.macRamdisk.RamDisk" as ramdisk.macRamdisk.RamDisk {
  blockSize : int
  devPartition : str
  disableJournal : bool
  diskSize : str
  diskutil : str
  environ
  free : int, str
  fsHelper
  hdiutil : str
  mntPoint : str
  module_version : str
  mounted : bool
  myRamdiskDev : NoneType, bytes, str
  runWith
  success : bool
  detach()
  eject()
  getData()
  getDevice()
  getNlogData()
  getNprintData()
  getVersion()
  setDevice(device)
  unionOver(target, fstype, nosuid, noowners, noatime, nobrowse)
  unmount()
}
class "ramdisk.ramdisk.RamDisk" as ramdisk.ramdisk.RamDisk {
  chkApp
  environ
  logger : bool
  module_version : str
  ramdisk
  getDevice()
  getMountPoint()
  getNlogData()
  getNprintData()
  getRamdisk()
  getVersion()
  setDevice(device)
  umount()
  unionOver()
}
class "ramdisk.winImDiskRamdisk.RamDisk" as ramdisk.winImDiskRamdisk.RamDisk {
  diskSize
  driveType : str
  fsType : str
  getIdXNameCmd : list
  getImDiskIdsCmd : list
  getMntPntsCmd : list
  imDiskNumber : NoneType
  imdisk : str
  mntPoint : bool, bytes, str
  module_version : str
  myRamdiskDev : NoneType, bytes, str
  runCmd
  success : bool
  writeMode : str
  getData()
  getDevice()
  getMountPoint()
  getNlogData()
  getNprintData()
  getRandomizedMountpoint()
  getVersion()
  mntPointAvailable(mntPoint)
  setDevice(device)
  umount(detach, dForce, rForce, mountpoint, unit)
  unmount(detach, dForce, rForce, mountpoint, unit)
}
ramdisk.lib.loggers.CyLogger --|> ramdisk.lib.singleton.Singleton
ramdisk.lib.loggers.MockLogger --|> ramdisk.lib.singleton.Singleton
ramdisk.linuxTmpfsRamdisk.RamDisk --|> ramdisk.commonRamdiskTemplate.RamDiskTemplate
ramdisk.macRamdisk.RamDisk --|> ramdisk.commonRamdiskTemplate.RamDiskTemplate
ramdisk.ramdisk.RamDisk --|> ramdisk.commonRamdiskTemplate.RamDiskTemplate
ramdisk.winImDiskRamdisk.RamDisk --|> ramdisk.commonRamdiskTemplate.RamDiskTemplate
ramdisk.lib.CheckApplicable.CheckApplicable --* ramdisk.lib.fsHelper.macosFsHelper.FsHelper : chkApp
ramdisk.lib.CheckApplicable.CheckApplicable --* ramdisk.ramdisk.RamDisk : chkApp
ramdisk.lib.environment.Environment --* ramdisk.lib.fsHelper.macosFsHelper.FsHelper : environ
ramdisk.lib.environment.Environment --* ramdisk.macRamdisk.RamDisk : environ
ramdisk.lib.environment.Environment --* ramdisk.ramdisk.RamDisk : environ
ramdisk.lib.fsHelper.macosFsHelper.FsHelper --* ramdisk.macRamdisk.RamDisk : fsHelper
ramdisk.lib.loggers.CyLogger --* ramdisk.commonRamdiskTemplate.RamDiskTemplate : logger
ramdisk.lib.loggers.CyLogger --* ramdisk.lib.fsHelper.macosFsHelper.FsHelper : logger
ramdisk.lib.loggers.CyLogger --* ramdisk.ramdisk.RamDisk : logger
ramdisk.lib.run_commands.RunWith --* ramdisk.lib.environment.Environment : rw
ramdisk.lib.run_commands.RunWith --* ramdisk.linuxTmpfsRamdisk.RamDisk : runWith
ramdisk.lib.run_commands.RunWith --* ramdisk.macRamdisk.RamDisk : runWith
ramdisk.lib.run_commands.RunWith --* ramdisk.winImDiskRamdisk.RamDisk : runCmd
ramdisk.linuxTmpfsRamdisk.RamDisk --* ramdisk.ramdisk.RamDisk : ramdisk
ramdisk.macRamdisk.RamDisk --* ramdisk.ramdisk.RamDisk : ramdisk
ramdisk.winImDiskRamdisk.RamDisk --* ramdisk.ramdisk.RamDisk : ramdisk
ramdisk.lib.loggers.MockLogger --o ramdisk.lib.run_commands.RunWith : logger
@enduml
